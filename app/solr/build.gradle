import org.apache.tools.ant.filters.*

project.description = "Solr Builder"

defaultTasks 'install'

// START Configuration variables ------------------------------------------
def base_dir_required = "$buildDir/solr_home"
def output_required = "$buildDir/solr_output.properties"
def instance_number = 1

def collection_name = "<your collection name here>"
def collection_config_dir = "<your solr instance conf>"
def host_name = "localhost"
def shard_numbers = 1
def replication_factor = 1

def is_solr_cloud = true
def is_deploy_to_tomcat = true
// END Configuration variables ---------------------------------------------

// Data from Tomcat build file output --------------------------------------										
def tomcat_port = "8082"
def catalina_home = "C:\\Users\\Vtssogari\\Documents\\GitHub\\automateScript\\web\\tomcat\\build\\tomcat\\tomcat7_3\\apache-tomcat-7.0.34"

// Data from Zookeeper build file output------------------------------------
def zk_host = "localhost:2181,localhost:2182,localhost:2183"

// Build script configuration ----------------------------------------------
//def install_solr_dir = "install/apache-solr-4.1"
def install_zkCli_dir = "install/SolrZKCli/lib"
def install_solr4war = "install/apache-solr-4.1-2013-01-07_23-32-20.war"

def solrHomeDir = base_dir_required + "/solr_home_" + instance_number
def tomcatWebappsDir = catalina_home + '/webapps'
def tomcatBinDir = catalina_home + '/bin'
def install_tomcat_solrConfig = "template/tomcat_context/solr.xml"
def install_solrHome = "template/solr_home"
def install_solrXML = "template/solr_cloud_solr_xml"

task deploySolrWarToTomcat(type: Copy) {
	def sourceFile = file(install_solr4war)
	def targetDir = file(tomcatWebappsDir)
	from sourceFile
	into targetDir
	rename (sourceFile.name, 'solr.war')
}

task copySolrContextXml(type: Copy, dependsOn: deploySolrWarToTomcat) {
	def sourceDir = file(install_tomcat_solrConfig)
	def targetDir = file(catalina_home + '/conf/Catalina/localhost')
	def solrHomePath = file(solrHomeDir).absolutePath
	def solrWarPath = file(tomcatWebappsDir + "/solr.war").absolutePath 
	from sourceDir
	into targetDir
	filter(ReplaceTokens, tokens: [tomcat_solr_war: solrWarPath, solr_home_location: solrHomePath])
}

task copySolrHome(type: Copy, dependsOn: copySolrContextXml) {
	def sourceDir = file(install_solrHome)
	def targetDir = file(solrHomeDir)
	from sourceDir
	into targetDir
}

task copyCloudSolrHome(type: Copy, dependsOn: copySolrContextXml) {
	def sourceDir = file(install_solrXML)
	def targetDir = file(solrHomeDir)
	from sourceDir
	into targetDir
}

String getSolrOpts(String solrHome, String port, String zkHost, boolean isWindows, boolean isSolrCloud) {
	String result = null
	def SOLR_OPTS = 'SOLR_OPTS=' + getSysProp(solrHome, port, zkHost, isSolrCloud)
	if(isWindows){
		result = System.getProperty("line.separator") + "set " + SOLR_OPTS
		result += System.getProperty("line.separator") + "set JAVA_OPTS=%JAVA_OPTS% %SOLR_OPTS%"
	}else{
		result = System.getProperty("line.separator") + SOLR_OPTS
		result += System.getProperty("line.separator") + 'JAVA_OPTS="$JAVA_OPTS $SOLR_OPTS"'
	}
	return result
}

String getSysProp(String solrHome, String port, String zkHost, boolean isSolrCloud){
	def sysProp = '-Dsolr.solr.home="'+solrHome+'"'
	if(isSolrCloud){
		sysProp += ' -Dport=' + port + ' -DhostContext=solr -DzkClientTimeout=20000 -DzkHost="' + zkHost +'"'
	}
	return sysProp
}


task install() {
	println "install.doFirst"
	if(is_solr_cloud){
		tasks.copySolrHome.enabled = false
	}else{
		tasks.copyCloudSolrHome.enabled = false
	}
	tasks.deploySolrWarToTomcat.enabled = is_deploy_to_tomcat
	tasks.copySolrContextXml.enabled = is_deploy_to_tomcat
	if(is_deploy_to_tomcat){
		def setEvnBatFile = file(tomcatBinDir + "/setenv.bat")
		def setEvnShFile = file(tomcatBinDir + "/setenv.sh")
		setEvnBatFile.append(getSolrOpts(solrHomeDir, tomcat_port, zk_host, true, is_solr_cloud))
		setEvnShFile.append(getSolrOpts(solrHomeDir, tomcat_port, zk_host, false, is_solr_cloud))
	}
	println "Done"
}


task generateRestAPIUrl(){
	String content = ''
	String zkCliDir = file(install_zkCli_dir).absolutePath
	content += '# 1. Run this just once in command for uploading configuration to zookeeper'
	content += System.getProperty("line.separator") + 'java -classpath "' + zkCliDir + '/*" org.apache.solr.cloud.ZkCLI -cmd upconfig -confdir ' + collection_config_dir + ' -confname ' + collection_name + ' -zkhost ' + zk_host
	
	content += System.getProperty("line.separator")
	def baseUrl = 'http://' + host_name + ':' + tomcat_port
	//1. create collection
	def createCollectionUrl = baseUrl + '/solr/admin/collections?action=CREATE&name=' + collection_name + '&collection.configname=' + collection_name + '&numShards=' + shard_numbers + '&replicationFactors=' + replication_factor
	//2. delete collection
	def deleteCollectionUrl = baseUrl + '/solr/admin/collections?action=DELETE&name=' + collection_name
	//3. create core
	def createCoreUrl = baseUrl + '/solr/admin/cores?action=CREATE&name=' + collection_name + '&collection=' + collection_name
	def solrJVMEnvProp = getSysProp(solrHomeDir, tomcat_port, zk_host, is_solr_cloud)
	
	
	def ofile = file(output_required)
	ofile.createNewFile()
	if(is_solr_cloud){
		content += System.getProperty("line.separator") + "# 2. Run this url to create collection just once"
		content += System.getProperty("line.separator") + "" + createCollectionUrl
		//content += System.getProperty("line.separator") + "delete_collection_url=" + deleteCollectionUrl
		content += System.getProperty("line.separator") + "# 3. Run this url on every solr instance to create core"
		content += System.getProperty("line.separator") + "" + createCoreUrl
	}
	
	content += System.getProperty("line.separator")
	content += System.getProperty("line.separator") + "# solr bootstrap for non tomcat server"
	content += System.getProperty("line.separator") + "" + solrJVMEnvProp
	ofile.write(content)
	
}


install.dependsOn copySolrHome, copyCloudSolrHome, generateRestAPIUrl

task uploadSolrConfigToZk(type:Exec) {
	String zkCliDir = file(install_zkCli_dir).absolutePath
	def commandToExecute = 'java -classpath "' + zkCliDir + '/*" org.apache.solr.cloud.ZkCLI -cmd upconfig -confdir "' + collection_config_dir + '" -confname ' + collection_name + ' -zkhost ' + zk_host
	
	println commandToExecute
	workingDir "./"
	if(isWindowsEnv()){
		//on windows:
		commandLine 'cmd', '/c', commandToExecute
	}else{
		//on linux
		commandLine commandToExecute
	}
	standardOutput = new ByteArrayOutputStream()
	//extension method stopTomcat.output() can be used to obtain the output:
	ext.output = {
		return standardOutput.toString()
	}
}

boolean isWindowsEnv() {
	def os = System.getProperty("os.name").toLowerCase() 
	return os.contains("windows");
}

task clean(type: Delete) {
   delete base_dir_required
}

task wrapper(type: Wrapper) {
    gradleVersion = '1.3'
}




